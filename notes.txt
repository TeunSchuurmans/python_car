
To do list:

    detla-time speed
    road-map algorithm. hamiltonian cycle?!?
    clean up and improve road.py
    define images in settings
    incorporate store_road_tiles() into init_road_surface()
    car sounds
    background music
    change Car class into an abstract car, together with a bot class and player class
    raycasting system
    make the fov adaptable for any amount of rays
    make current_tile a global function
    neural network
    camera that follows the car
    update README


raycasting:
    get the current tile the ray is on
    check the tile type

    #vertical
    for x in range(MAX_DEPTH)
        if self.current_tile is in self.road.road_dict 
            math self.road.road_dict[self.current_tile[0], self.current_tile[1]]:
                #finish
                    case 1:
                        if x_end == self.left_tile_border or x_end == self.right_tile_border:
                            break
                        else:
                            x_end += dx
                            y_end += dy
                    #vertical
                    case 2:
                        if x_end == self.left_tile_border or x_end == self.right_tile_border:
                            break
                        else:
                            x_end += dx
                            y_end += dy
                    #horizontal
                    case 3: 
                        x_end += dx
                        y_end += dy
                    #left->down
                    case 4:
                        if x_end == self.right_tile_border:
                            break
                        else:
                            x_end += dx
                            y_end += dy
                    #down->right
                    case 5:
                        if x_end == self.right_tile_border:
                            break:
                        else:
                            x_end += dx
                            y_end += dy
                    #right->up
                    case 6:
                        if x_end == self.right_tile_border:
                            break
                        else:
                            x_end += dx
                            y_end += dy
                    #up->left
                    case 7:
                        if x_end == self.right_tile_border:
                            break:
                        else:
                            x_end += dx
                            y_end += dy
        else:
            x_end += dx
            y_end += dy




self.tile_map = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 5, 3, 3, 4, 0, 0, 0, 0, 5, 3, 3, 3, 3, 4, 0],
        [0, 2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 5, 3, 3, 7, 0],
        [0, 1, 0, 0, 6, 3, 3, 4, 0, 2, 0, 2, 0, 0, 0, 0],
        [0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 6, 3, 3, 4, 0],
        [0, 6, 3, 3, 4, 0, 0, 2, 0, 6, 3, 3, 4, 0, 2, 0],
        [0, 0, 0, 0, 2, 0, 0, 6, 3, 3, 3, 3, 7, 0, 2, 0],
        [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0],
        [0, 0, 0, 0, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 0],
        ]



npc car:
    neural network
    different input 


    